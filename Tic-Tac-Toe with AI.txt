Work on project. Stage 5/5: An undefeated champion
Project: Tic-Tac-Toe with AI
 Hard

Description
Let's write the "hard" level.

Compared to the "medium" level difficulty, this level thinks farther ahead than simply finding an immediate win or preventing an immediate loss. This level can see two moves ahead, three moves ahead, and so on. In fact, it can see all the possible outcomes of the game at once and will choose the best move. This level will play perfectly regardless of the opponentâ€™s skill.

The algorithm that implements this is called Minimax. This is a brute force algorithm that maximizes the value of the one's own position and minimizes the value of the opponent's position. The algorithm works not just for Tic-Tac-Toe but for every game with two players and alternate move order, for example, chess.

You need to implement this as the "hard" difficulty level. Before you start working, check out a tutorial on using the algorithm.

You also should add a parameter "hard" to be able to play against this level.

Example
The example below shows how your program should work.

Input command: start hard user
Making move level "hard"
---------
|       |
| X     |
|       |
---------
Enter the coordinates: 2 2
---------
|       |
| X O   |
|       |
---------
Making move level "hard"
---------
|   X   |
| X O   |
|       |
---------
Enter the coordinates: 3 2
---------
|   X   |
| X O   |
|   O   |
---------
Making move level "hard"
---------
| X X   |
| X O   |
|   O   |
---------
Enter the coordinates: 3 1
---------
| X X   |
| X O   |
| O O   |
---------
Making move level "hard"
---------
| X X X |
| X O   |
| O O   |
---------
X wins

Input command: exit

===============================================================================================

Work on project. Stage 4/5: Signs of intelligence
Project: Tic-Tac-Toe with AI

Description
Let's write a "medium" level difficulty. Compared to randomly picking a cell to make a move, this level is considerably smarter.

The "medium" level difficulty makes a move using the following process:

If it can win in one move (if it has two in a row), it places a third to get three in a row and win.
If the opponent can win in one move, it plays the third itself to block the opponent to win.
Otherwise, it makes a random move.
Despite the randomness of the third rule, this level is a lot harder to beat. This level stops all simple attempts to beat it due to the second rule, and always wins when it can due to the first rule.

You should also add the parameter "medium" to be able to play against this level. And, of course, it should be possible to make an "easy" vs "medium" matchup!

Example
The example below shows how your program should work.

Input command: start user medium
---------
|       |
|       |
|       |
---------
Enter the coordinates: 2 2
---------
|       |
|   X   |
|       |
---------
Making move level "medium"
---------
|       |
|   X   |
| O     |
---------
Enter the coordinates: 1 1
---------
| X     |
|   X   |
| O     |
---------
Making move level "medium"
---------
| X     |
|   X   |
| O   O |
---------
Enter the coordinates: 2 1
---------
| X     |
|   X   |
| O X O |
---------
Making move level "medium"
---------
| X O   |
|   X   |
| O X O |
---------
Enter the coordinates: 2 1
---------
| X O   |
| X X   |
| O X O |
---------
Making move level "medium"
---------
| X O   |
| X X O |
| O X O |
---------
Enter the coordinates: 1 3
---------
| X O X |
| X X O |
| O X O |
---------
Draw

Input command: start medium user
---------
|       |
|       |
|       |
---------
Making move level "medium"
---------
|       |
|       |
|   X   |
---------
Enter the coordinates: 2 2
---------
|       |
|   O   |
|   X   |
---------
Making move level "medium"
---------
|       |
|   O   |
| X X   |
---------
Enter the coordinates: 3 3
---------
|       |
|   O   |
| X X O |
---------
Making move level "medium"
---------
| X     |
|   O   |
| X X O |
---------
Enter the coordinates: 2 1
---------
| X     |
| O O   |
| X X O |
---------
Making move level "medium"
---------
| X     |
| O O X |
| X X O |
---------
Enter the coordinates: 1 3
---------
| X   O |
| O O X |
| X X O |
---------
Making move level "medium"
---------
| X X O |
| O O X |
| X X O |
---------
Draw

Input command: exit

============================================================================================

Work on project. Stage 3/5: Watch 'em fight
Project: Tic-Tac-Toe with AI

Description
It is time to make some variations of the game possible. What if you want to play with a friend and not with AI? What if you get tired of playing the game and want to see a match between two AI's? Finally, you need to be able to choose between being the first move or the second move when playing against AI.

Write a menu loop that can interpret two commands, "start" and "exit".

The command "start" should take two parameters: who will play X's and who will play O's. Two parameters are possible for now: "user" to play as a human and "easy" to play as an easy level AI. In the next stages, you will add "medium" and "hard".

The command "exit" should terminate the program.

Do not forget to handle incorrect input!

Example
The example below shows how your program should work.

Input command: start
Bad parameters!
Input command: start easy
Bad parameters!
Input command: start easy easy
---------
|       |
|       |
|       |
---------
Making move level "easy"
---------
|       |
|     X |
|       |
---------
Making move level "easy"
---------
|       |
| O   X |
|       |
---------
Making move level "easy"
---------
|       |
| O   X |
|     X |
---------
Making move level "easy"
---------
|       |
| O   X |
|   O X |
---------
Making move level "easy"
---------
|       |
| O X X |
|   O X |
---------
Making move level "easy"
---------
|     O |
| O X X |
|   O X |
---------
Making move level "easy"
---------
| X   O |
| O X X |
|   O X |
---------
X wins

Input command: start easy user
---------
|       |
|       |
|       |
---------
Making move level "easy"
---------
|       |
|       |
|     X |
---------
Enter the coordinates: 2 2
---------
|       |
|   O   |
|     X |
---------
Making move level "easy"
---------
|   X   |
|   O   |
|     X |
---------
Enter the coordinates: 3 1
---------
|   X   |
|   O   |
| O   X |
---------
Making move level "easy"
---------
|   X X |
|   O   |
| O   X |
---------
Enter the coordinates: 2 3
---------
|   X X |
|   O O |
| O   X |
---------
Making move level "easy"
---------
| X X X |
|   O O |
| O   X |
---------
X wins

Input command: start user user
---------
|       |
|       |
|       |
---------
Enter the coordinates: 3 1
---------
|       |
|       |
| X     |
---------
Enter the coordinates: 2 2
---------
|       |
|   O   |
| X     |
---------
Enter the coordinates: 2 1
---------
|       |
| X O   |
| X     |
---------
Enter the coordinates: 3 2
---------
|       |
| X O   |
| X O   |
---------
Enter the coordinates: 1 1
---------
| X     |
| X O   |
| X O   |
---------
X wins

Input command: exit

==========================================================================================

Work on project. Stage 2/5: Easy does it
Project: Tic-Tac-Toe with AI

Description
Now it is time to make a working game. In this version of the program, the user will be playing with X's, and the "easy" level computer will be playing with O's.

At this level, the computer should make random moves. This level will be perfect for those who play this game for the first time! You can even create a level of difficulty that will always give in and never win the game. You can implement such a level along with the"easy" level, if you want, but it will not be tested.

When starting the program, an empty field should be displayed. The user starts the game with an X. Then, the computer should make its move with an O. This goes on and on until someone wins or there is a draw.

At the very end of the game, you need to print the final result of the game.

Example
The example below shows how your program should work.

---------
|       |
|       |
|       |
---------
Enter the coordinates: 2 2
---------
|       |
|   X   |
|       |
---------
Making move level "easy"
---------
| O     |
|   X   |
|       |
---------
Enter the coordinates: 3 3
---------
| O     |
|   X   |
|     X |
---------
Making move level "easy"
---------
| O     |
| O X   |
|     X |
---------
Enter the coordinates: 3 1
---------
| O     |
| O X   |
| X   X |
---------
Making move level "easy"
---------
| O     |
| O X O |
| X   X |
---------
Enter the coordinates: 3 2
---------
| O     |
| O X O |
| X X X |
---------
X wins

===========================================================================================

Work on project. Stage 1/5: Initial setup
Project: Tic-Tac-Toe with AI

Description
In this project, you'll write a game called Tic-Tac-Toe that you can play with your computer. The computer will have three levels of difficulty: easy, medium, and hard.

For starters, let's write a program that knows how to work with coordinates and determine the state of the game.

Suppose the top-left cell has the coordinates (1, 1) and the bottom-right cell has the coordinates (3, 3) like in this table:

(1, 1) (1, 2) (1, 3)
(2, 1) (2, 2) (2, 3)
(3, 1) (3, 2) (3, 3)

The program should work in the following way:

Get the 3x3 field from the first input line (it contains 9 symbols containing X, O and _, the underscore meaning that it's an empty cell).
Output this 3x3 field with cells before the user's move.
Then ask the user about their next move.
The user should input 2 numbers that represent the cell that wants to mark with X or O. The nine symbols representing the field would be on the first line and these 2 numbers would be on the second line of the user input. Since the game always starts with an X, if the number of X's and O's on the field is the same, the user should make a move with an X, and if there are more X's than O's, then the user should make a move with an O.
Output the table including the user's most recent move.
Then, output the state of the game.
Possible states:

"Game not finished" when no side has three in a row but the field has empty cells.
"Draw" when no side has three in a row and the field has no empty cells.
"X wins" when the field has three X's in a row.
"O wins" when the field has three O's in a row.
If the user input wrong coordinates, the program should keep asking until the user enters the coordinates that represent an empty cell on the field, and after that output the field with that move. You should output the field only 2 times: before the move and after.

Examples
The examples below show how your program should work.

Example 1

Enter cells: _XXOO_OX_
---------
|   X X |
| O O   |
| O X   |
---------
Enter the coordinates: 3 1
This cell is occupied! Choose another one!
Enter the coordinates: one
You should enter numbers!
Enter the coordinates: one three
You should enter numbers!
Enter the coordinates: 4 1
Coordinates should be from 1 to 3!
Enter the coordinates: 1 1
---------
| X X X |
| O O   |
| O X   |
---------
X wins
Example 2

Enter cells: XX_XOXOO_
---------
| X X   |
| X O X |
| O O   |
---------
Enter the coordinates: 3 3
---------
| X X   |
| X O X |
| O O O |
---------
O wins
Example 3

Enter cells: OX_XOOOXX
---------
| O X   |
| X O O |
| O X X |
---------
Enter the coordinates: 1 3
---------
| O X X |
| X O O |
| O X X |
---------
Draw
Example 4

Enter cells: _XO_OX___
---------
|   X O |
|   O X |
|       |
---------
Enter the coordinates: 3 1
---------
|   X O |
|   O X |
| X     |
---------
Game not finished
